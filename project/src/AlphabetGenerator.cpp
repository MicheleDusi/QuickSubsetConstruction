/*
 * Michele Dusi, Gianfranco Lamperti
 * Quick Subset Construction
 * 
 * AlphabetGenerator.cpp
 *
 * 
 * This source file contains the implementation of the AlphabetGenerator class.
 * The class is used to generate the alphabet of a given automaton.
 * For the generation, two things are needed:
 * - the set of computer characters that can be used to build the alphabet's symbols.
 * - the desidered length of the alphabet's symbols.
 */

#include <cstring>

#include "AlphabetGenerator.hpp"

#include "Debug.hpp"

using std::vector;
using std::string;

namespace quicksc {

	const char* AlphabetGenerator::default_letters = "abcdefghijklmnopqrstuvwxyz";
	const unsigned int AlphabetGenerator::default_cardinality = 10U;

	AlphabetGenerator::AlphabetGenerator() {
		this->m_letters = default_letters;
		this->m_cardinality = default_cardinality;
	}

	AlphabetGenerator::~AlphabetGenerator() {}

	void AlphabetGenerator::setLetters(char letters[]) {
		if (letters != NULL) {
			this->m_letters = letters;
		}
	}

	void AlphabetGenerator::setCardinality(unsigned int cardinality) {
		this->m_cardinality = cardinality;
	}

	const char* AlphabetGenerator::getLetters() {
		return this->m_letters;
	}

	unsigned int AlphabetGenerator::getCardinality() {
		return this->m_cardinality;
	}

	/**
	 * Builds an alphabet with the cardinality (=number of symbols of the alphabet) fixed,
	 * starting from a base of n characters passed as a parameter.
	 * [!] Note that these characters are passed as an array of char and require the terminal character '\0'.
	 * 
	 * The alphabet's symbols are built as a combination and concatenation of the characters,
	 * starting with the combinations of shorter length.
	 * 
	 * Note: as an array of characters it is possible to use the array of characters "letters"
	 * containing all and only the 26 lowercase letters of the English alphabet.
	 */
	Alphabet AlphabetGenerator::generate() {
		std::vector<std::vector<string>> symbols;

		// Initializing the set of strings of length zero
		// This procedure is used only as a base step, but the null string will be removed
		// at the end of the function because it is not required that the automaton contains epsilon transitions.
		std::vector<string> zero_length_strings;
		zero_length_strings.push_back("");
		symbols.push_back(zero_length_strings);

		// Count the number of symbols inserted in the alphabet (without considering the empty string)
		int counter = 0;
		// Until the size of the alphabet is less than the desired cardinality
		while (counter < m_cardinality) {

			// Prepare the vector that will contain the strings of the same size, generated by concatenating any character with any symbol of the previous set of strings.
			std::vector<string> same_length_strings;

			for (string prefix : symbols[symbols.size() - 1]) {

				for (int l = 0; l < strlen(m_letters) && counter < m_cardinality; l++, counter++) {
					string newlabel = (prefix + m_letters[l]);
					same_length_strings.push_back(newlabel);
				}
			}

			symbols.push_back(same_length_strings);
		}

		// Remove the set containing the empty string
		symbols.erase(symbols.begin());

		// Flatten the vector of vectors of strings
		Alphabet alpha;
		for (std::vector<string> string_set : symbols) {
			for (string s : string_set)
			alpha.push_back(s);
		}

		DEBUG_ASSERT_TRUE(alpha.size() == m_cardinality);
		return alpha;
	}


} /* namespace quicksc */
